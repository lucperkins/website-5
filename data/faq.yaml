General:
- q: What is etcd?
  a: |
    etcd is a consistent distributed key-value store. Mainly used as a separate coordination service, in distributed systems. And designed to hold small amounts of data that can fit entirely in memory.
- q: How do you pronounce etcd?
  a: |
    etcd is pronounced **/ˈɛtsiːdiː/**, and means "distributed `etc` directory."
- q: Do clients have to send requests to the etcd leader?
  a: |
    [Raft](https://raft.github.io/raft.pdf) is leader based; the leader handles all client requests that need cluster consensus. However, the client does not need to know which node is the leader. Any request that requires consensus sent to a follower is automatically forwarded to the leader. Requests that do not require consensus (e.g. serialized reads) can be processed by any cluster member.
- q: What is the difference between `listen-<client,peer>-urls`, `advertise-client-urls`, and `initial-advertise-peer-urls`?
  a: |
    The `--listen-client-urls` and `--listen-peer-urls` flags specify the local addresses etcd server binds to for accepting incoming connections. To listen on a port for all interfaces, specify `0.0.0.0` as the listen IP address.
    
    The `--advertise-client-urls` and `--initial-advertise-peer-urls` flags specify the addresses etcd clients or other etcd members should use to contact the etcd server. The advertise addresses must be reachable from the remote machines. Do not advertise addresses like `localhost` or `0.0.0.0` for a production setup since these addresses are unreachable from remote machines.
- q: Why doesn't changing `listen-peer-urls` or `initial-advertise-peer-urls` update advertised peer URLs in the member list output?
  a: |
    A member's advertised peer URLs come from `--initial-advertise-peer-urls` on initial cluster boot. Changing the listen peer URLs or the initial advertise peers after booting the member won't affect the exported advertise peer URLs (e.g. `etcdctl member list` output remains the same), since changes must go through quorum to avoid membership configuration split brain. Use `etcdctl member update` to update a member's peer URLs.
- q: Do clients have to send requests to the etcd leader?
  a: |
    [Raft](https://raft.github.io/raft.pdf) is leader-based; the leader handles all client requests which need cluster consensus. However, the client does not need to know which node is the leader. Any request that requires consensus sent to a follower is automatically forwarded to the leader. Requests that do not require consensus (e.g., serialized reads) can be processed by any cluster member.
Configuration:
- q: What is the difference between `listen-<client,peer>-urls`, `advertise-client-urls`, and `initial-advertise-peer-urls`?
  a: |
    `listen-client-urls` and `listen-peer-urls` specify the local addresses etcd server binds to for accepting incoming connections. To listen on a port for all interfaces, specify `0.0.0.0` as the listen IP address.

    `advertise-client-urls` and `initial-advertise-peer-urls` specify the addresses etcd clients or other etcd members should use to contact the etcd server. The advertise addresses must be reachable from the remote machines. Do not advertise addresses like `localhost` or `0.0.0.0` for a production setup since these addresses are unreachable from remote machines.
- q: Why doesn't changing `--listen-peer-urls` or `--initial-advertise-peer-urls` update the advertised peer URLs in `etcdctl member list`?
  a: |
    A member's advertised peer URLs come from `--initial-advertise-peer-urls` on initial cluster boot. Changing the listen peer URLs or the initial advertise peers after booting the member won't affect the exported advertise peer URLs since changes must go through quorum to avoid membership configuration split brain. Use `etcdctl member update` to update a member's peer URLs.
"System requirements":
- q: What are etcd's system requirements?
  a: |
    Since etcd writes data to disk, SSD is highly recommended. To prevent performance degradation or unintentionally overloading the key-value store, etcd enforces a configurable storage size quota set to 2GB by default. To avoid swapping or running out of memory, the machine should have at least as much RAM to cover the quota. 8GB is a suggested maximum size for normal environments and etcd warns at startup if the configured value exceeds it. At CoreOS, an etcd cluster is usually deployed on dedicated CoreOS Container Linux machines with dual-core processors, 2GB of RAM, and 80GB of SSD *at the very least*. **Note that performance is intrinsically workload dependent; please test before production deployment**. See [hardware][hardware-setup] for more recommendations.

    Most stable production environment is Linux operating system with amd64 architecture; see [supported platforms](../supported-platforms) for more.
